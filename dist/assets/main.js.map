{"version":3,"sources":["webpack:///./~/react-router-redux/lib/middleware.js","webpack:///./~/react-router-redux/lib/sync.js","webpack:///./src/main.jsx","webpack:///./~/react-router-redux/lib/actions.js","webpack:///./~/react-router-redux/lib/reducer.js","webpack:///./src/app/route.js","webpack:///./~/react-router-redux/lib/index.js"],"names":["Logger","logger","create","info","routing","toaster","reducer","i18n","shared","history","store","rootRoute","childRoutes","require","routes","document","getElementById","module","exports","path","onEnter","nextState","replace","cb","navigatorLang","window","navigator","language","userLanguage","toLowerCase","_initPromise","Promise","all","dispatch","actions","i18NInit","fallbackLang","then","result","catch","getComponent","getIndexRoute","partialNextState"],"mappings":";;;;;;AAAA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA,kCAAkC,0BAA0B,0CAA0C,gBAAgB,OAAO,kBAAkB,EAAE,aAAa,EAAE,OAAO,wBAAwB,EAAE;;AAEjM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;;AChCA;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe;;AAE9P;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;;;;AC1JA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAIA,SAAS,yBAAkB,MAAlB,CAAb;;AAEA;;;AAGA,CAAC,YAAW;AACR,QAAIC,SAASD,OAAOE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","file":"main.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = routerMiddleware;\n\nvar _actions = require('./actions');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * This middleware captures CALL_HISTORY_METHOD actions to redirect to the\n * provided history object. This will prevent these actions from reaching your\n * reducer or any middleware that comes after this one.\n */\nfunction routerMiddleware(history) {\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (action.type !== _actions.CALL_HISTORY_METHOD) {\n          return next(action);\n        }\n\n        var _action$payload = action.payload,\n            method = _action$payload.method,\n            args = _action$payload.args;\n\n        history[method].apply(history, _toConsumableArray(args));\n      };\n    };\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-router-redux/lib/middleware.js\n// module id = 1255\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports['default'] = syncHistoryWithStore;\n\nvar _reducer = require('./reducer');\n\nvar defaultSelectLocationState = function defaultSelectLocationState(state) {\n  return state.routing;\n};\n\n/**\n * This function synchronizes your history state with the Redux store.\n * Location changes flow from history to the store. An enhanced history is\n * returned with a listen method that responds to store updates for location.\n *\n * When this history is provided to the router, this means the location data\n * will flow like this:\n * history.push -> store.dispatch -> enhancedHistory.listen -> router\n * This ensures that when the store state changes due to a replay or other\n * event, the router will be updated appropriately and can transition to the\n * correct router state.\n */\nfunction syncHistoryWithStore(history, store) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$selectLocationSt = _ref.selectLocationState,\n      selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,\n      _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,\n      adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla;\n\n  // Ensure that the reducer is mounted on the store and functioning properly.\n  if (typeof selectLocationState(store.getState()) === 'undefined') {\n    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');\n  }\n\n  var initialLocation = void 0;\n  var isTimeTraveling = void 0;\n  var unsubscribeFromStore = void 0;\n  var unsubscribeFromHistory = void 0;\n  var currentLocation = void 0;\n\n  // What does the store say about current location?\n  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {\n    var locationState = selectLocationState(store.getState());\n    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);\n  };\n\n  // Init initialLocation with potential location in store\n  initialLocation = getLocationInStore();\n\n  // If the store is replayed, update the URL in the browser to match.\n  if (adjustUrlOnReplay) {\n    var handleStoreChange = function handleStoreChange() {\n      var locationInStore = getLocationInStore(true);\n      if (currentLocation === locationInStore || initialLocation === locationInStore) {\n        return;\n      }\n\n      // Update address bar to reflect store state\n      isTimeTraveling = true;\n      currentLocation = locationInStore;\n      history.transitionTo(_extends({}, locationInStore, {\n        action: 'PUSH'\n      }));\n      isTimeTraveling = false;\n    };\n\n    unsubscribeFromStore = store.subscribe(handleStoreChange);\n    handleStoreChange();\n  }\n\n  // Whenever location changes, dispatch an action to get it in the store\n  var handleLocationChange = function handleLocationChange(location) {\n    // ... unless we just caused that location change\n    if (isTimeTraveling) {\n      return;\n    }\n\n    // Remember where we are\n    currentLocation = location;\n\n    // Are we being called for the first time?\n    if (!initialLocation) {\n      // Remember as a fallback in case state is reset\n      initialLocation = location;\n\n      // Respect persisted location, if any\n      if (getLocationInStore()) {\n        return;\n      }\n    }\n\n    // Tell the store to update by dispatching an action\n    store.dispatch({\n      type: _reducer.LOCATION_CHANGE,\n      payload: location\n    });\n  };\n  unsubscribeFromHistory = history.listen(handleLocationChange);\n\n  // History 3.x doesn't call listen synchronously, so fire the initial location change ourselves\n  if (history.getCurrentLocation) {\n    handleLocationChange(history.getCurrentLocation());\n  }\n\n  // The enhanced history uses store as source of truth\n  return _extends({}, history, {\n    // The listeners are subscribed to the store instead of history\n    listen: function listen(listener) {\n      // Copy of last location.\n      var lastPublishedLocation = getLocationInStore(true);\n\n      // Keep track of whether we unsubscribed, as Redux store\n      // only applies changes in subscriptions on next dispatch\n      var unsubscribed = false;\n      var unsubscribeFromStore = store.subscribe(function () {\n        var currentLocation = getLocationInStore(true);\n        if (currentLocation === lastPublishedLocation) {\n          return;\n        }\n        lastPublishedLocation = currentLocation;\n        if (!unsubscribed) {\n          listener(lastPublishedLocation);\n        }\n      });\n\n      // History 2.x listeners expect a synchronous call. Make the first call to the\n      // listener after subscribing to the store, in case the listener causes a\n      // location change (e.g. when it redirects)\n      if (!history.getCurrentLocation) {\n        listener(lastPublishedLocation);\n      }\n\n      // Let user unsubscribe later\n      return function () {\n        unsubscribed = true;\n        unsubscribeFromStore();\n      };\n    },\n\n\n    // It also provides a way to destroy internal listeners\n    unsubscribe: function unsubscribe() {\n      if (adjustUrlOnReplay) {\n        unsubscribeFromStore();\n      }\n      unsubscribeFromHistory();\n    }\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-router-redux/lib/sync.js\n// module id = 1256\n// module chunks = 2","import \"babel-polyfill\";\nimport config from \"config\";\nimport React from \"react\";\nimport {render} from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport {Router,browserHistory} from \"react-router\";\nimport {syncHistoryWithStore,routerReducer} from \"react-router-redux\";\nimport i18n from \"darch/src/i18n\";\nimport Toaster from \"darch/src/toaster\";\nimport {LoggerFactory,Redux} from \"darch/src/utils\";\n\nlet Logger = new LoggerFactory(\"main\");\n\n/****************************************************************\n* App Bootstrap\n****************************************************************/\n(function() {\n    let logger = Logger.create(\"bootstrap\");\n    logger.info(\"enter\", config);\n\n    // Create redux store with app reducers\n    new Redux({\n        routing: routerReducer,\n        toaster: Toaster.reducer,\n        i18n: i18n.reducer\n    }, {shared: true});\n\n    // Create an enhanced history that syncs navigation events with the store\n    const history = syncHistoryWithStore(browserHistory, Redux.shared.store);\n\n    const rootRoute = {\n        childRoutes: [\n            require(\"./app/route\")\n        ]\n    };\n\n    const routes = (\n        <Provider store={Redux.shared.store}>\n            <Router history={history} routes={rootRoute} />\n        </Provider>\n    );\n\n    render(routes, document.getElementById(\"main-page\"));\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.jsx","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\nvar CALL_HISTORY_METHOD = exports.CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\n\nfunction updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: { method: method, args: args }\n    };\n  };\n}\n\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\nvar push = exports.push = updateLocation('push');\nvar replace = exports.replace = updateLocation('replace');\nvar go = exports.go = updateLocation('go');\nvar goBack = exports.goBack = updateLocation('goBack');\nvar goForward = exports.goForward = updateLocation('goForward');\n\nvar routerActions = exports.routerActions = { push: push, replace: replace, go: go, goBack: goBack, goForward: goForward };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-router-redux/lib/actions.js\n// module id = 706\n// module chunks = 2","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.routerReducer = routerReducer;\n/**\n * This action type will be dispatched when your history\n * receives a location change.\n */\nvar LOCATION_CHANGE = exports.LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\n\nvar initialState = {\n  locationBeforeTransitions: null\n};\n\n/**\n * This reducer will update the state with the most recent location history\n * has transitioned to. This may not be in sync with the router, particularly\n * if you have asynchronously-loaded routes, so reading from and relying on\n * this state is discouraged.\n */\nfunction routerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      type = _ref.type,\n      payload = _ref.payload;\n\n  if (type === LOCATION_CHANGE) {\n    return _extends({}, state, { locationBeforeTransitions: payload });\n  }\n\n  return state;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-router-redux/lib/reducer.js\n// module id = 707\n// module chunks = 2","import {LoggerFactory,Redux} from \"darch/src/utils\";\nimport i18n from \"darch/src/i18n\";\n\nlet Logger = new LoggerFactory(\"app.route\");\n\nmodule.exports = {\n    path: \"/\",\n\n    onEnter(nextState, replace, cb) {\n        // Initialize i18n\n        let logger = Logger.create(\"onEnter\");\n        logger.info(\"enter\");\n\n        let navigatorLang = \n            window.navigator.language||\n            window.navigator.userLanguage||\"\";\n\n        navigatorLang = navigatorLang.toLowerCase();\n\n        var _initPromise = Promise.all([\n            Redux.dispatch(i18n.actions.i18NInit(navigatorLang, {\n                fallbackLang: \"pt-br\"\n            }))\n        ]);\n\n        // Fire callback anyway\n        _initPromise.then(function(result) {\n            logger.info(\"all promises resolved\", result);\n            cb();\n        }).catch(function() {cb();});\n    },\n\n    getComponent(nextState, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./page\"));\n        });\n    },\n\n    /*getChildRoutes(partialNextState, cb) {\n        require.ensure([], (require) => {\n            cb(null, [\n                require(\"./home/route\")\n            ]);\n        });\n    },*/\n\n    getIndexRoute(partialNextState, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./home/route\"));\n        });\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/route.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.routerMiddleware = exports.routerActions = exports.goForward = exports.goBack = exports.go = exports.replace = exports.push = exports.CALL_HISTORY_METHOD = exports.routerReducer = exports.LOCATION_CHANGE = exports.syncHistoryWithStore = undefined;\n\nvar _reducer = require('./reducer');\n\nObject.defineProperty(exports, 'LOCATION_CHANGE', {\n  enumerable: true,\n  get: function get() {\n    return _reducer.LOCATION_CHANGE;\n  }\n});\nObject.defineProperty(exports, 'routerReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducer.routerReducer;\n  }\n});\n\nvar _actions = require('./actions');\n\nObject.defineProperty(exports, 'CALL_HISTORY_METHOD', {\n  enumerable: true,\n  get: function get() {\n    return _actions.CALL_HISTORY_METHOD;\n  }\n});\nObject.defineProperty(exports, 'push', {\n  enumerable: true,\n  get: function get() {\n    return _actions.push;\n  }\n});\nObject.defineProperty(exports, 'replace', {\n  enumerable: true,\n  get: function get() {\n    return _actions.replace;\n  }\n});\nObject.defineProperty(exports, 'go', {\n  enumerable: true,\n  get: function get() {\n    return _actions.go;\n  }\n});\nObject.defineProperty(exports, 'goBack', {\n  enumerable: true,\n  get: function get() {\n    return _actions.goBack;\n  }\n});\nObject.defineProperty(exports, 'goForward', {\n  enumerable: true,\n  get: function get() {\n    return _actions.goForward;\n  }\n});\nObject.defineProperty(exports, 'routerActions', {\n  enumerable: true,\n  get: function get() {\n    return _actions.routerActions;\n  }\n});\n\nvar _sync = require('./sync');\n\nvar _sync2 = _interopRequireDefault(_sync);\n\nvar _middleware = require('./middleware');\n\nvar _middleware2 = _interopRequireDefault(_middleware);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nexports.syncHistoryWithStore = _sync2['default'];\nexports.routerMiddleware = _middleware2['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-router-redux/lib/index.js\n// module id = 737\n// module chunks = 2"],"sourceRoot":""}